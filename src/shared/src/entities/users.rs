//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use super::sea_orm_active_enums::Accountsource;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    #[sea_orm(unique)]
    pub external_account_id: String,
    pub account_type: Accountsource,
    pub last_login: Option<DateTime>,
    pub avatar_url: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub banned_reason: Option<String>,
    pub banned: bool,
    pub globally_banned: bool,
    #[sea_orm(column_type = "Text", nullable)]
    pub global_ban_reason: Option<String>,
    pub global_ban_expires_at: Option<DateTime>,
    pub disabled: bool,
    pub ignore_weight_penalty: bool,
    pub color: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::channel_events::Entity")]
    ChannelEvents,
    #[sea_orm(has_many = "super::chatlog_imports::Entity")]
    ChatlogImports,
    #[sea_orm(has_many = "super::content_queue_submissions::Entity")]
    ContentQueueSubmissions,
    #[sea_orm(has_many = "super::flask_dance_oauth::Entity")]
    FlaskDanceOauth,
    #[sea_orm(has_many = "super::permissions::Entity")]
    Permissions,
    #[sea_orm(has_many = "super::user_weights::Entity")]
    UserWeights,
}

impl Related<super::channel_events::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ChannelEvents.def()
    }
}

impl Related<super::chatlog_imports::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ChatlogImports.def()
    }
}

impl Related<super::content_queue_submissions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ContentQueueSubmissions.def()
    }
}

impl Related<super::flask_dance_oauth::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FlaskDanceOauth.def()
    }
}

impl Related<super::permissions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Permissions.def()
    }
}

impl Related<super::user_weights::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserWeights.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
