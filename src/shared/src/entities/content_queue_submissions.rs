//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use super::sea_orm_active_enums::Contentqueuesubmissionsource;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "content_queue_submissions")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub content_queue_id: i32,
    pub user_id: i32,
    pub submitted_at: DateTime,
    pub content_id: i32,
    pub submission_source_type: Contentqueuesubmissionsource,
    pub submission_source_id: i64,
    #[sea_orm(column_type = "Double")]
    pub weight: f64,
    pub user_comment: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::content::Entity",
        from = "Column::ContentId",
        to = "super::content::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Content,
    #[sea_orm(
        belongs_to = "super::content_queue::Entity",
        from = "Column::ContentQueueId",
        to = "super::content_queue::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    ContentQueue,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,
}

impl Related<super::content::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Content.def()
    }
}

impl Related<super::content_queue::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ContentQueue.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
