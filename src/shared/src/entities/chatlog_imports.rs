//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "chatlog_imports")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub channel_id: i32,
    pub imported_at: DateTime,
    pub imported_by: i32,
    pub timezone: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::channel_events::Entity")]
    ChannelEvents,
    #[sea_orm(
        belongs_to = "super::channels::Entity",
        from = "Column::ChannelId",
        to = "super::channels::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Channels,
    #[sea_orm(has_many = "super::chatlogs::Entity")]
    Chatlogs,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::ImportedBy",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,
}

impl Related<super::channel_events::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ChannelEvents.def()
    }
}

impl Related<super::chatlogs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Chatlogs.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl Related<super::channels::Entity> for Entity {
    fn to() -> RelationDef {
        super::chatlogs::Relation::Channels.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::chatlogs::Relation::ChatlogImports.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
