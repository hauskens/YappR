//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use super::sea_orm_active_enums::Videotype;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "channels")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub broadcaster_id: i32,
    #[sea_orm(unique)]
    pub platform_ref: String,
    pub main_video_type: Videotype,
    #[sea_orm(unique)]
    pub platform_channel_id: String,
    pub source_channel_id: Option<i32>,
    pub last_active: Option<DateTime>,
    pub platform_name: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::broadcaster::Entity",
        from = "Column::BroadcasterId",
        to = "super::broadcaster::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Broadcaster,
    #[sea_orm(has_many = "super::channel_events::Entity")]
    ChannelEvents,
    #[sea_orm(has_one = "super::channel_settings::Entity")]
    ChannelSettings,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::SourceChannelId",
        to = "Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SelfRef,
    #[sea_orm(has_many = "super::chatlog_imports::Entity")]
    ChatlogImports,
    #[sea_orm(has_many = "super::chatlogs::Entity")]
    Chatlogs,
    #[sea_orm(has_many = "super::moderation_actions::Entity")]
    ModerationActions,
    #[sea_orm(has_many = "super::user_channel_roles::Entity")]
    UserChannelRoles,
    #[sea_orm(has_many = "super::video::Entity")]
    Video,
}

impl Related<super::broadcaster::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Broadcaster.def()
    }
}

impl Related<super::channel_events::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ChannelEvents.def()
    }
}

impl Related<super::channel_settings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ChannelSettings.def()
    }
}

impl Related<super::chatlogs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Chatlogs.def()
    }
}

impl Related<super::moderation_actions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ModerationActions.def()
    }
}

impl Related<super::user_channel_roles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserChannelRoles.def()
    }
}

impl Related<super::video::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Video.def()
    }
}

impl Related<super::chatlog_imports::Entity> for Entity {
    fn to() -> RelationDef {
        super::chatlogs::Relation::ChatlogImports.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::chatlogs::Relation::Channels.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
