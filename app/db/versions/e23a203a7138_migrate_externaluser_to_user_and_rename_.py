"""Migrate ExternalUser to User and rename ExternalUserWeight to UserWeight

Revision ID: e23a203a7138
Revises: ccf252ee5d14
Create Date: 2025-08-28 20:59:21.798234

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlalchemy_file
import sqlalchemy_utils
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e23a203a7138'
down_revision: Union[str, None] = 'ccf252ee5d14'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Add new columns to users table first
    op.add_column('users', sa.Column('disabled', sa.Boolean(), server_default='false', nullable=False))
    op.add_column('users', sa.Column('ignore_weight_penalty', sa.Boolean(), server_default='false', nullable=False))
    
    # Create the new user_weights table 
    op.create_table('user_weights',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('weight', sa.Float(), nullable=False),
    sa.Column('broadcaster_id', sa.Integer(), nullable=False),
    sa.Column('banned', sa.Boolean(), nullable=False),
    sa.Column('banned_at', sa.DateTime(), nullable=True),
    sa.Column('unban_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['broadcaster_id'], ['broadcaster.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    # Migrate data from external_users to users
    # For each external_user, try to find a matching user by external_account_id and account_type
    # If found, update the user with external_user fields
    # If not found, create a new user record
    op.execute("""
        UPDATE users SET 
            disabled = eu.disabled,
            ignore_weight_penalty = eu.ignore_weight_penalty
        FROM external_users eu 
        WHERE users.external_account_id = eu.external_account_id::text 
            AND users.account_type = eu.account_type;
    """)
    
    # Insert external_users that don't have corresponding users records
    op.execute("""
        INSERT INTO users (name, external_account_id, account_type, first_login, last_login, banned, disabled, ignore_weight_penalty)
        SELECT 
            eu.username,
            eu.external_account_id::text,
            eu.account_type,
            NOW(),
            NOW(),
            false,
            eu.disabled,
            eu.ignore_weight_penalty
        FROM external_users eu
        WHERE NOT EXISTS (
            SELECT 1 FROM users u 
            WHERE u.external_account_id = eu.external_account_id::text 
                AND u.account_type = eu.account_type
        );
    """)
    
    # Drop the foreign key constraint first before updating data
    op.drop_constraint(op.f('content_queue_submissions_user_id_fkey'), 'content_queue_submissions', type_='foreignkey')
    
    # Update content_queue_submissions to reference users instead of external_users
    op.execute("""
        UPDATE content_queue_submissions 
        SET user_id = u.id
        FROM external_users eu
        JOIN users u ON u.external_account_id = eu.external_account_id::text AND u.account_type = eu.account_type
        WHERE content_queue_submissions.user_id = eu.id;
    """)
    
    # Migrate data from external_user_weights to user_weights
    op.execute("""
        INSERT INTO user_weights (user_id, weight, broadcaster_id, banned, banned_at, unban_at)
        SELECT 
            u.id,
            euw.weight,
            euw.broadcaster_id,
            euw.banned,
            euw.banned_at,
            euw.unban_at
        FROM external_user_weights euw
        JOIN external_users eu ON euw.external_user_id = eu.id
        JOIN users u ON u.external_account_id = eu.external_account_id::text AND u.account_type = eu.account_type;
    """)
    
    # Now drop the old tables
    op.drop_table('external_user_weights')
    op.drop_table('external_users')
    
    # Create the new foreign key constraint
    op.create_foreign_key(None, 'content_queue_submissions', 'users', ['user_id'], ['id'])


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('users', 'ignore_weight_penalty')
    op.drop_column('users', 'disabled')
    op.drop_constraint(None, 'content_queue_submissions', type_='foreignkey')
    op.create_foreign_key(op.f('content_queue_submissions_user_id_fkey'), 'content_queue_submissions', 'external_users', ['user_id'], ['id'])
    op.create_table('external_user_weights',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('external_user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('weight', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('broadcaster_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('banned', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('banned_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('unban_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['broadcaster_id'], ['broadcaster.id'], name=op.f('external_user_weights_broadcaster_id_fkey')),
    sa.ForeignKeyConstraint(['external_user_id'], ['external_users.id'], name=op.f('external_user_weights_external_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('external_user_weights_pkey'))
    )
    op.drop_table('user_weights')
    # ### end Alembic commands ###
