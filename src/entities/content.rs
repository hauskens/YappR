//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "content")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Text")]
    pub url: String,
    pub duration: Option<i32>,
    pub title: String,
    pub thumbnail_url: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub stripped_url: String,
    pub channel_name: String,
    pub author: Option<String>,
    pub created_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::content_queue::Entity")]
    ContentQueue,
    #[sea_orm(has_many = "super::content_queue_submissions::Entity")]
    ContentQueueSubmissions,
}

impl Related<super::content_queue::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ContentQueue.def()
    }
}

impl Related<super::content_queue_submissions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ContentQueueSubmissions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
