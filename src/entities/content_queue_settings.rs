//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "content_queue_settings")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub broadcaster_id: i32,
    pub prefer_shorter_content: bool,
    pub view_count_min: i32,
    #[sea_orm(column_type = "Text")]
    pub allowed_platforms: String,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub weight_settings: Option<Json>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::broadcaster::Entity",
        from = "Column::BroadcasterId",
        to = "super::broadcaster::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Broadcaster,
}

impl Related<super::broadcaster::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Broadcaster.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
