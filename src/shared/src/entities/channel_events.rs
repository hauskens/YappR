//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use super::sea_orm_active_enums::Channeleventtype;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "channel_events")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub channel_id: i32,
    pub timestamp: DateTime,
    pub raw_message: Option<String>,
    pub event_type: Channeleventtype,
    pub username: Option<String>,
    pub user_id: Option<i32>,
    pub import_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::channels::Entity",
        from = "Column::ChannelId",
        to = "super::channels::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Channels,
    #[sea_orm(
        belongs_to = "super::chatlog_imports::Entity",
        from = "Column::ImportId",
        to = "super::chatlog_imports::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    ChatlogImports,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,
}

impl Related<super::channels::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Channels.def()
    }
}

impl Related<super::chatlog_imports::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ChatlogImports.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
