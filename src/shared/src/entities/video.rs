//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use super::sea_orm_active_enums::Videotype;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "video")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub title: String,
    pub video_type: Videotype,
    #[sea_orm(column_type = "Double")]
    pub duration: f64,
    pub channel_id: i32,
    pub last_updated: DateTime,
    pub platform_ref: String,
    pub thumbnail: Option<Json>,
    pub audio: Option<Json>,
    pub uploaded: DateTime,
    pub active: bool,
    pub estimated_upload_time: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::channels::Entity",
        from = "Column::ChannelId",
        to = "super::channels::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Channels,
    #[sea_orm(has_many = "super::transcriptions::Entity")]
    Transcriptions,
}

impl Related<super::channels::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Channels.def()
    }
}

impl Related<super::transcriptions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Transcriptions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
