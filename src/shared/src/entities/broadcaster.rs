//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "broadcaster")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub name: String,
    pub hidden: bool,
    pub profile_image_url: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::broadcaster_settings::Entity")]
    BroadcasterSettings,
    #[sea_orm(has_many = "super::channels::Entity")]
    Channels,
    #[sea_orm(has_many = "super::content_queue::Entity")]
    ContentQueue,
    #[sea_orm(has_many = "super::content_queue_settings::Entity")]
    ContentQueueSettings,
    #[sea_orm(has_many = "super::user_weights::Entity")]
    UserWeights,
}

impl Related<super::broadcaster_settings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BroadcasterSettings.def()
    }
}

impl Related<super::channels::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Channels.def()
    }
}

impl Related<super::content_queue::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ContentQueue.def()
    }
}

impl Related<super::content_queue_settings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ContentQueueSettings.def()
    }
}

impl Related<super::user_weights::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserWeights.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
